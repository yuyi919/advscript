// Generated by dts-bundle-generator v7.1.0

export type TextStyleFontStyle = "normal" | "italic" | "oblique";
export type TextStyleFontVariant = "normal" | "small-caps";
export type TextStyleFontWeight = "normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
export interface IFontStyle {
	/**
	 * 字体
	 */
	fontFamily: string;
	/**
	 * 字号
	 */
	fontSize: number;
	/**
	 * 同浏览器
	 */
	fontStyle?: TextStyleFontStyle;
	/**
	 * 同浏览器
	 */
	fontVariant?: TextStyleFontVariant;
	/**
	 * 同浏览器
	 */
	fontWeight?: TextStyleFontWeight;
	/**
	 * 行高
	 */
	lineHeight?: number;
}
declare abstract class enums {
	protected opaque: any;
}
export type f64 = number;
export type element = {
	fontSize: Shared_f64;
	character: string;
	elementType: ElementType_enums;
	width: Shared_f64;
	height: Shared_f64;
	x: Shared_f64;
	y: Shared_f64;
	font: string;
};
export type ElementIdentifier = number & {
	charIdentifier: true;
};
/**
 * 压缩的文本序列
 * 0位是起始字符id，之后分别是每行末尾的字符id
 */
export type CompressedElementIdentifiers = [
	ElementIdentifier,
	ElementIdentifier,
	...ElementIdentifier[]
];
export interface ITypographyBaseOptions {
	/**
	 * 折行宽度
	 */
	wrapWidth?: f64;
	/**
	 * 每行字数
	 * @defaultValue `25`
	 */
	column: number;
	/**
	 * 行数
	 * @defaultValue `Infinity`
	 */
	row: number;
	/**
	 * 排版网格宽度（即一个em多宽，与 textSequence 中的 fontSize 不同）
	 * @defaultValue `26`
	 */
	gridSize: number;
	/**
	 * 字距（仅 CJK 文字）
	 * @defaultValue `0`
	 */
	xInterval: number;
	/**
	 * 行距
	 * @defaultValue `6`
	 */
	yInterval: number;
	/**
	 * 字符间距（仅西文文字）
	 * @defaultValue `0`
	 */
	letterSpacing: number;
	ruby?: {
		source: string;
		target: string;
	}[];
}
export interface ITypographyOptions extends IFontStyle, Partial<ITypographyBaseOptions> {
	/**
	 * 展示区域宽度
	 */
	wrapWidth?: number;
	fontSize: number;
}
export interface ITextSequenceBase {
	seqs: CompressedElementIdentifiers;
	areaWidth: number;
	areaHeight: number;
	width: number;
	height: number;
	lastLineIndex: number;
}
export type f64 = number;
export declare function createTextTypography(input: string, config: ITypographyOptions, outputEcs: true): ITextSequenceBase & {
	elements: element[];
};
export declare function createTextTypography(input: string, config: ITypographyOptions, outputEcs?: false): ITextSequenceBase;

export {};
